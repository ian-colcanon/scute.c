:id[variable,,none]
:constant[constant,, none]
:shape[native,,none]
:native[native,,none]
:plus[,binary,term]
:minus[unary, binary, term]
:times[,binary, factor]
:divide[,binary, factor]
:modulo[, binary, factor]
:equals[, binary, equals]
:bang_equals[, binary, equals]
:less_equals[, binary, compare]
:greater_equals[, binary, compare]
:less[, binary, compare]
:greater[, binary, compare]
:assign[, binary, assign]
:incr_assign[, binary, assign]
:decr_assign[, binary, assign]
:bang[unary,,unary]
:incr[unary,,unary]
:decr[unary,,unary]
:colon
:question
:eval_assign
:real[literal,,none]
:integer[literal,,none]
:error
:eof
:newline
:indent
:l_paren[grouping,,none]
:r_paren
:l_brack[array,,none]
:r_brack
:comma
:deref[scopeDeref,deref,call]
:tilda
:semi
:string[stringLiteral,,none]
asin
acos
atan
print
and[,and_,and]
arc
by
do
draw
def
for
false[literal,,none]
func
from
if
let
line
while
with
return
rect
repeat
radians
rand
circle
cos
cbezier
sin
sqrt
tan
text
true[literal,,none]
to
turn
or
path
polyline
polygon
ellipse
else
vertex
var
hsin
hcos
htan
mirror
move
null[literal,,none]
jump
qbezier
ungon
in
as
via
anim
at