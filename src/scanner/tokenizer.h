#ifndef scute_tokenizer_h
#define scute_tokenizer_h

typedef enum {
	TK_ID,
	TK_CONSTANT,
	TK_SHAPE,
	TK_NATIVE,
	TK_PLUS,
	TK_MINUS,
	TK_TIMES,
	TK_DIVIDE,
	TK_MODULO,
	TK_EQUALS,
	TK_BANG_EQUALS,
	TK_LESS_EQUALS,
	TK_GREATER_EQUALS,
	TK_LESS,
	TK_GREATER,
	TK_ASSIGN,
	TK_INCR_ASSIGN,
	TK_DECR_ASSIGN,
	TK_BANG,
	TK_INCR,
	TK_DECR,
	TK_REAL,
	TK_INTEGER,
	TK_L_PAREN,
	TK_L_BRACK,
	TK_DEREF,
	TK_STRING,
	TK_AND,
	TK_FALSE,
	TK_TRUE,
	TK_NULL,
	TK_COLON,
	TK_QUESTION,
	TK_EVAL_ASSIGN,
	TK_ERROR,
	TK_EOF,
	TK_NEWLINE,
	TK_INDENT,
	TK_R_PAREN,
	TK_R_BRACK,
	TK_COMMA,
	TK_TILDA,
	TK_SEMI,
	TK_ASIN,
	TK_ACOS,
	TK_ATAN,
	TK_ARC,
	TK_BY,
	TK_DO,
	TK_DRAW,
	TK_DEF,
	TK_FOR,
	TK_FUNC,
	TK_FROM,
	TK_IF,
	TK_LET,
	TK_LINE,
	TK_WHILE,
	TK_WITH,
	TK_RETURN,
	TK_RECT,
	TK_REPEAT,
	TK_RADIANS,
	TK_RAND,
	TK_CIRCLE,
	TK_COS,
	TK_CONST,
	TK_CBEZIER,
	TK_SIN,
	TK_SQRT,
	TK_TAN,
	TK_TEXT,
	TK_TO,
	TK_TURN,
	TK_OR,
	TK_PRINT,
	TK_PATH,
	TK_POLYLINE,
	TK_POLYGON,
	TK_ELLIPSE,
	TK_ELSE,
	TK_VERTEX,
	TK_VAR,
	TK_HSIN,
	TK_HCOS,
	TK_HTAN,
	TK_MIRROR,
	TK_MOVE,
	TK_JUMP,
	TK_QBEZIER,
	TK_UNGON,
	TK_IN,
	TK_AS,
} TKType;

typedef enum {
	CS_ERROR,
	CS_CENTER,
	CS_PINK,
	CS_PI,
	CS_PURPLE,
	CS_TAU,
	CS_TURQUOISE,
	CS_TEAL,
	CS_TRANSPARENT,
	CS_E,
	CS_RED,
	CS_ORANGE,
	CS_OLIVE,
	CS_YELLOW,
	CS_Y,
	CS_BLACK,
	CS_BLUE,
	CS_BROWN,
	CS_MAGENTA,
	CS_MAROON,
	CS_NAVY,
	CS_AQUA,
	CS_SILVER,
	CS_LCORNER,
	CS_LIME,
	CS_INDIGO,
	CS_VIOLET,
	CS_WHITE,
	CS_GREEN,
	CS_GREY,
	CS_GRAY,
	CS_X,
	CS_XY,
} CSType;

TKType findKeyword(char* start, char* current);

CSType findConstant(char* start, char* current);

#endif